# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  go: circleci/go@1.5.0
  aws-cli: circleci/aws-cli@1.3.2
  ruby: circleci/ruby@1.1.2
  windows: circleci/windows@2.4.0

jobs:
  lint:
    docker:
      - image: "golangci/golangci-lint:v1.36"

    steps:
      - checkout
      - run: golangci-lint run -v

  preflight:
    executor:
      name: go/default
      tag: '1.15'

    steps:
      - checkout

      - go/load-cache
      - go/mod-download
      - go/save-cache

      - run: go vet -tests=false ./...
      - go/test

  build-darwin:
    executor:
      name: go/default
      tag: '1.15'

    steps:
      - checkout
      - go/load-cache
      - run: sudo apt-get update && sudo apt-get install upx
      - run:
          name: build darwin/amd64
          command: make darwin
          environment:
            GOOS: darwin
            GOARCH: amd64

      - persist_to_workspace:
          root: build
          paths:
            - darwin

  build-linux:
    executor:
      name: go/default
      tag: '1.15'

    steps:
      - checkout
      - go/load-cache
      - run: sudo apt-get update && sudo apt-get install upx
      - run:
          name: build linux/amd64
          command: make linux
          environment:
            GOOS: linux
            GOARCH: amd64
      - run:
          name: build linux/arm64
          command: make linux
          environment:
            GOOS: linux
            GOARCH: arm64
      - run:
          name: build linux/armv7
          command: make linux
          environment:
            GOOS: linux
            GOARCH: arm
            GOARM: 7

      - persist_to_workspace:
          root: build
          paths:
            - linux

  build-windows:
    executor:
      name: go/default
      tag: '1.15'

    steps:
      - checkout
      - go/load-cache
      - run: sudo apt-get update && sudo apt-get install upx osslsigncode
      - run:
          name: build windows/amd64
          command: make windows
          environment:
            GOOS: windows
            GOARCH: amd64

      - persist_to_workspace:
          root: build
          paths:
            - windows

  configure-aws:
    executor: aws-cli/default

    environment:
      AWS_SHARED_CREDENTIALS_FILE: build/aws_credentials

    steps:
      - run: mkdir -p build

      # This is only really useful for configuring base IAM credentials, as the advanced config file setup
      # required to test aws-runas can't be managed with the orb. Use non-standard env var names to avoid
      # confusing aws-runas when we're running the tests. Also use a specific, non-default profile name so
      # a similar configuration can be used locally and with CI
      - aws-cli/setup:
          skip-install-check: false
          configure-default-region: false
          profile-name: circleci
          aws-access-key-id: AWS_ACCESSKEY
          aws-secret-access-key: AWS_SECRETKEY

      - persist_to_workspace:
          root: build
          paths:
            - aws_credentials

#  build:
#    executor:
#      name: go/default
#      tag: '1.15'
#
#    environment:
#      AWS_SHARED_CREDENTIALS_FILE: build/aws_credentials
#
#    steps:
#      - checkout
#      - go/load-cache
#
#      - run: mkdir -p build
#      - run: go build -v -ldflags '-X main.Version=0.0.1-0-circle' -o build/aws-runas
#      - run: GOOS=windows go build -v -ldflags '-X main.Version=0.0.1-0-circle' -o build/aws-runas.exe
#
#      # This is only really useful for configuring base IAM credentials, as the advanced config file setup
#      # required to test aws-runas can't be managed with the orb. Use non-standard env var names to avoid
#      # confusing aws-runas when we're running the tests. Also use a specific, non-default profile name so
#      # a similar configuration can be used locally and with CI
#      - aws-cli/setup:
#          skip-install-check: false
#          configure-default-region: false
#          profile-name: circleci
#          aws-access-key-id: AWS_ACCESSKEY
#          aws-secret-access-key: AWS_SECRETKEY
#
#      - persist_to_workspace:
#          root: build
#          paths:
#            - aws-runas*
#            - aws_credentials

  test-linux:
    executor:
      name: ruby/default
      tag: '2.7'

    environment:
      AWS_SHARED_CREDENTIALS_FILE: build/aws_credentials

    steps:
      - checkout

      - attach_workspace:
          at: build

      - run: mv build/linux/amd64/aws-runas build/
      - ruby/install-deps
      - ruby/rspec-test

  test-windows:
    executor:
      name: windows/default

    environment:
      AWS_SHARED_CREDENTIALS_FILE: build/aws_credentials
      AWS_CONFIG_FILE: testdata/aws_config

    steps:
      - checkout

      - attach_workspace:
          at: build

      # was hoping to run the serverspec tests, but things were weird on Windows, just
      # run a few commands instead just to verify things happen without blowing up
      - run: mv build/windows/amd64/aws-runas.exe build/
      - run: build/aws-runas --help
      - run: build/aws-runas -lv iam-role
      - run: build/aws-runas -mv iam-role
      - run: build/aws-runas -uv
      - run: build/aws-runas -v --whoami circleci
      - run: build/aws-runas -vse iam-role
      - run: build/aws-runas -v --whoami iam-role
      - run: build/aws-runas -ve iam-role

workflows:
  version: 2

  # So far we don't have a 'requires' in build for lint, maybe something to change? I mean, who doesn't like clean code?
  build_and_test:
    jobs:
      - lint
      - preflight
      - build-darwin:
          requires:
            - preflight
      - build-linux:
          requires:
            - preflight
#      - build-windows:
#          requires:
#            - preflight
      - configure-aws:
          requires:
            - build-darwin
            - build-linux
#            - build-windows
      - test-linux:
          requires:
            - configure-aws
#      - test-windows:
#          requires:
#            - configure-aws